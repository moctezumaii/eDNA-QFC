90015.69+24412.50
90015.69+24412.50+46783.80
library(LAGOSNE)
12*16*20
12*17*20
12*16*25
12*15*25
12*15*20
23250+46783.80+90015.69
250400+203000+50000+172897+38643+62462+239158+611911+79670+56144
library(rentrez)
?entrez_search
12000/60
111*247
20e6/150000
22e6/150000
site=c("A","B","C","D","E","F","G","H","I","J")
lat=c(41.88811, 41.89281, 41.88588, 41.88371, 41.88309, 41.88634, 41.89004)
long=c(-83.36557, -83.37124, -83.36008, -83.35610, -83.35421, -83.35212, -83.37328)
fixed.df = data.frame(site, lat, long)
fixed.df = data.frame(site, lat, long, fill = TRUE)
?data.frame
seq("A","Z")
seq(A,Z)
c("A":"Z")
LETTERS
LETTERS[1:10]
library(rentrez)
?entrez_fetch()
?entrez_search()
tis = 2
tsp = 4
cur = c(0.5, 1, 1.5, 2, 2.5)
maxMig = 1
u = uniform(1)
u = runif(1)
u
t = cur - (1/maxMig) * log10(1-u)
t
v = runif(1)
v > (t/(tsp-tis) - tis/(tsp-tis))
t - cur
t
u
log10(1-u)
cur
cur - (1/maxMig)*log10(1-u)
t
tsp-tis
tis
t/(tsp-tis)
t/(tsp-tis) - tis/(tsp-tis)
tsp = 10
tis = 1
u = runif(1)
cur
cur = seq(0.5,5, by = 0.5)
cur
tis
t=cur-(1/maxMig)*log10(1-u)
t
tsp
tis
t/(tsp-tis)
t/(tsp-tis)-tis/(tsp-tis)
maxMig = 0.01
t = cur-(1/maxMig)*log10(1-u)
t
t/(tsp-tis)-tis/(tsp-tis)
log(0.5)
library(rgbif)
13.4*365
15.7*365
2982/13.4
citation(package = "wallace")
install.packages("wallace")
citation(package = "wallace")
citation(package = "rgbif")
MI = c(rep(1,3849), rep(2,128), rep(3,88), rep(4,2165), rep(5,187), rep(6,127))
ours = c(1,1,2,1,2,1,2,1,1,3,1,1,1,2,2,2,3,5,1)
pie(MI)
pie(MI, labels = "", col = c(1:6))
?pie
pie(table(MI))
pie(table(ours))
pie(table(ours), col = c(1,2,3,5))
pie(table(MI), col = c(1,2,3,4,5,6))
par(mfrow = c(1,2))
pie(table(MI), col = c(1,2,3,4,5,6))
pie(table(ours), col = c(1,2,3,5))
par(mar = c(0,0,0,0))
pie(table(MI), col = c(1,2,3,4,5,6))
pie(table(MI), col = c(1,2,3,4,5,6), main = "ALL MI")
par(mar = c(2,2,2,2))
pie(table(MI), col = c(1,2,3,4,5,6), main = "ALL MI")
pie(table(ours), col = c(1,2,3,5), main = "Sampled")
citation(package = "coala")
citation(package = "ape")
citation(package = "poppr")
citation(package = "ENMTools")
devtools::install_github("danlwarren/ENMTools")
floor(0.3*40)
ceiling(0.3*40)
ceiling(0.31*40)
floor(0.31*40)
2.536e9/150
2.536e9/300
8454245*2*150
library(ape)
citation(package = "ape")
version(ape)
ape
packageVersion("ape")
?clustalomega
104/6
4*60
6*55
library(wicket)
poly1="POLYGON((-87.84668 50.51343,-95.22949 47.5172,-89.42871 41.31082,-85.38574 39.70719,-77.73926 40.31304,-75.10254 42.87596,-74.5752 45.213,-87.84668 50.51343))"
poly1 = wkt_correct(poly1)
spobj = readWKT(poly1)
library(rgeos)
spobj = readWKT(poly1)
grid_4 = st_make_grid(spobj, n = c(2,2))
library(sf)
grid_4 = st_make_grid(spobj, n = c(2,2))
mygrid = format(grid_4, width = Inf)
24552+5625
56144+79670+611911+239158+62462+38643+172897+50000+203000+250400+232218
bb = qbbox(tabl$latitude, tabl$longitude)
50*30
60*11
660-450
210*30
450-90
360/10
46+49+49+34+69+49+59+69+69+69
46+44+44+29+59+44+49+59+59+59
3*12*6*2
432*3
9*450
9*500
4288.26+35000.26
38122.04+7191.04
5890.19+46334.91
43400.96+8270.91
setwd("~/Desktop/Lake_Polygons")
#Several libraries are needed for manipulation of shapefiles and plotting below
library(sp)
library(maptools)
library(maps)
library(prevR)
library(plotrix)
library(TSP)
library(RgoogleMaps)
#Change this part of the script for other lakes!
#lakename = "Austin Lake"
#nsamples = 40
#lakept = c(-85.551679, 42.176194)   #Center point of the lake from LAGOS database
#launchpt = c(-85.556282, 42.180116)   #GPS coordinates of the boat launch
lakename = "Cass Lake"
nsamples = 35
lakept = c(-83.366888,42.606313)
launchpt = c(-83.373825, 42.617706)
#Read in the Lake polygons
lakes = readShapePoly("Lake_Polygons")
#Which lakes in the dataset match the name we're interested in
whichone = which(lakes$LAKE_NAME == lakename)
#Which of these contain the center point from LAGOS (lakept above l.24)
for(x in 1:length(whichone)) {#
    tmp = point.in.SpatialPolygons(lakept[1], lakept[2], lakes[whichone[x],])#
    if(tmp == TRUE) {#
        thisone = whichone[x]#
    }#
}
thisone
#Replace the full set of lakes with just the one we're interested in (saving space?)
lakes = lakes[thisone,]
#Randomly sample from this polygon nsamples times and convert this object to a data frame
pts = spsample(lakes, nsamples, type = "random")
pts = as.data.frame(pts)
pts = rbind(launchpt, pts)
#Use functions from the TSP package to compute a least cost route through all sample locations
#This is a version of the "Traveling Salesman Problem"
tsp = TSP(dist(pts))
tour = solve_TSP(tsp, method = "nearest_insertion", start = 1L)
#No longer want an asymmetric route -- this is a simple TSP
#tsp = insert_dummy(tsp, label = "cut")
#tour = solve_TSP(tsp, method = "2-opt", control = list(rep=10))
#path.tsp = unname(cut_tour(tour,"cut"))
#Create a new object for plotting that has sample IDs and GPS coords
#Randomly assign ~30% of the sample as benthic
type = rep("S", nsamples)
nbenthic = floor(0.3*nsamples)  #30% of samples should be benthic
benth = sample(c(1:nsamples), nbenthic, replace = FALSE)
type[benth] = "B"
#tabl = data.frame(name = c("launch",c(1:nsamples)), desc = c(NA,type), latitude = round(pts[path.tsp,2],6), longitude = round(pts[path.tsp,1],6))
tabl = data.frame(name = c("launch",c(1:nsamples)), desc = c(NA,type), latitude = round(pts[tour,2],6), longitude = round(pts[tour,1],6))
#Write this to a csv file
par(mfrow = c(1,2))
#OLD PLOTTING DOWN HERE
#plot(lakes, main = lakename, lwd = 2, add = TRUE)
#lines(tabl$longitude, tabl$latitude, pch = 1, type = "b", lwd = 0.5, cex = 4)
#text(tabl$longitude, tabl$latitude, labels = tabl$name)
#New version uses RgoogleMaps
library(RgoogleMaps)
bb = qbbox(tabl$latitude, tabl$longitude)
tmp = paste0(tabl$latitude, ",", tabl$longitude)
mypath = paste0("|", tmp)
mypath = paste(mypath, collapse = "", sep = "")
mypath = paste0("&path=color:grey|weight:1", mypath)
MyMap = GetMap.bbox(bb$lonR, bb$latR, destfile = paste0(lakename,".png"), path = mypath, GRAYSCALE = TRUE)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon=tabl$longitude, FUN = points, pch= 1, cex = 4)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon = tabl$longitude, FUN=text, labels = tabl$name, font = 2, add = TRUE)
addtable2plot(0,0, tabl, display.rownames = F, display.colnames = F, bty = "o", hlines = T, vlines = T, xpad = 2, ypad = 1)
library(RgoogleMaps)
bb = qbbox(tabl$latitude, tabl$longitude)
tmp = paste0(tabl$latitude, ",", tabl$longitude)
mypath = paste0("|", tmp)
mypath = paste(mypath, collapse = "", sep = "")
mypath = paste0("&path=color:grey|weight:1", mypath)
MyMap = GetMap.bbox(bb$lonR, bb$latR, destfile = paste0(lakename,".png"), path = mypath, GRAYSCALE = TRUE)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon=tabl$longitude, FUN = points, pch= 1, cex = 4)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon = tabl$longitude, FUN=text, labels = tabl$name, font = 2, add = TRUE)
plot.new()
addtable2plot(0,0, tabl, display.rownames = F, display.colnames = F, bty = "o", hlines = T, vlines = T, xpad = 2, ypad = 1)
plot.new()
library(RgoogleMaps)
bb = qbbox(tabl$latitude, tabl$longitude)
tmp = paste0(tabl$latitude, ",", tabl$longitude)
mypath = paste0("|", tmp)
mypath = paste(mypath, collapse = "", sep = "")
mypath = paste0("&path=color:grey|weight:1", mypath)
MyMap = GetMap.bbox(bb$lonR, bb$latR, destfile = paste0(lakename,".png"), path = mypath, GRAYSCALE = TRUE)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon=tabl$longitude, FUN = points, pch= 1, cex = 4)
PlotOnStaticMap(MyMap, lat = tabl$latitude, lon = tabl$longitude, FUN=text, labels = tabl$name, font = 2, add = TRUE)
plot.new()
addtable2plot(0,0, tabl, display.rownames = F, display.colnames = F, bty = "o", hlines = T, vlines = T, xpad = 2, ypad = 1)
dev.off()
pts
pts = spsample(lakes, 10, type = "random")
pts
launchpt
setpts = matrix(data = runif(6), nrow = 3, ncol 2)
setpts = matrix(data = runif(6), nrow = 3, ncol = 2)
setpts
rbind(setpts, pts)
pts = as.data.frame(pts)
rbind(setpts, pts)
pts
pts$x = c(pts$x, setpts[,1])
for(r in 1:length(setpts[,1])) {#
    pts = rbind(pts,setpts[r,])#
}
pts
setpts = matrix(data = c(#
    -83,42,#
    -83,42,#
    -83,42,#
    -83,42), nrow = 4, ncol = 2, byrow = TRUE)
setpts
